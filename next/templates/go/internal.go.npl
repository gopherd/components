{{- define "meta/path"}}{{this.Package.Name}}/internal/{{this.Package.Name}}.go{{end -}}
{{- define "meta/skip"}}{{exist meta.path}}{{end -}}

{{- define "go/dict:import.statement"}}
{{with .name}}{{.}} {{end}}"{{.value}}"
{{- end -}}

{{- define "go/interface"}}
{{$objName := printf "%sComponent" (render "node:pascal.case.name" .File.Package) -}}
{{- if eq "Component" .Name -}}
// Ensure {{$objName}} implements {{$objName}} interface.
var _ {{this.Package.Name}}.Component = (*{{$objName}})(nil)
{{range .Methods.List}}
// {{.Name}} implements {{this.Package.Name}}.Component.{{.Name}}.
func (c *{{$objName}}) {{render "interface.method:name" .}}({{next .Params}}){{next .Result}} {
    return {{with .Result.Type}}{{render "type:zero" .}}{{end}}{{if .Annotations.next.error}}{{if .Result.Type}}, {{end}}nil{{end}}
}
{{end -}}
{{end -}}
{{end -}}

{{- $objName := printf "%sComponent" (render "node:pascal.case.name" this.Package) -}}

package {{this.Package.Name}}

import (
	"context"
    {{render "imports:declarations" this.Package.Imports | align}}
    {{"github.com/gopherd/core/component" | quote | indent}}

	"github.com/gopherd/components/{{this.Package.Name}}"
)

func init() {
	component.Register({{this.Package.Name}}.Name, func() component.Component {
		return &{{$objName}}{}
	})
}

// {{$objName}} implements {{this.Package.Name}}.Component.
type {{$objName}} struct {
	component.BaseComponent[{{this.Package.Name}}.Options]
}

// Init implements component.Component.Init.
func (c *{{$objName}}) Init(ctx context.Context) error {
    // TODO: implement the Init method or remove it if not needed
	return nil
}

// Uninit implements component.Component.Uninit.
func (c *{{$objName}}) Uninit(ctx context.Context) error {
    // TODO: implement the Uninit method or remove it if not needed
    return nil
}

// Start implements component.Component.Start.
func (c *{{$objName}}) Start(ctx context.Context) error {
    // TODO: implement the Start method or remove it if not needed
    return nil
}

// Shutdown implements component.Component.Shutdown.
func (c *{{$objName}}) Shutdown(ctx context.Context) error {
    // TODO: implement the Shutdown method or remove it if not needed
    return nil
}
{{render "go/interfaces" this.Package.Decls.Interfaces}}