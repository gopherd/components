// Code generated by "next 0.0.4"; DO NOT EDIT.

package logger

import "log/slog"
import "github.com/gopherd/core/op"

var _ = (*slog.Level)(nil)
var _ = op.SetOr[any]

// Name represents the logger component name.
const Name = "github.com/gopherd/components/logger";

// Options defines the configuration options for the logger component.
type Options struct {
	// Output specifies where the log is written to.
	// Supported values:
	//   - "stderr": standard error output
	//   - "stdout": standard output
	//   - "": discard logs
	Output string
	// Level sets the minimum log level.
	Level slog.Level
	// JSON determines whether to output logs in JSON format.
	JSON bool
	// TimeFormat specifies the time format for log entries.
	// Supported values:
	//   - "h": "2006-01-02 15:04:05" in local time
	//   - "H": "2006-01-02 15:04:05.000000" in local time
	//   - "u": "2006-01-02 15:04:05" in UTC
	//   - "U": "2006-01-02 15:04:05.000000" in UTC
	//   - "t": RFC3339 format
	//   - "T": RFC3339Nano format
	//   - "s": Unix seconds
	//   - "S": Unix nanoseconds
	//   - "": omit time
	//   - other: custom time format
	TimeFormat string
	// SourceFormat specifies the source code location format.
	// Supported values:
	//   - "s": file:line
	//   - "S": pkg/file:line
	//   - "n": pkg.func/file:line
	//   - "": omit source
	SourceFormat string
	// LevelFormat specifies the log level format.
	// Supported values:
	//   - "l": one letter (D, I, W, E)
	//   - "L": full word (DEBUG, INFO, WARN, ERROR)
	//   - "": omit level
	LevelFormat string
	// HTTPPath specifies the root HTTP path to get/set log level.
	// If empty, the HTTP handler is not registered.
	// 
	// - get log level: GET {HTTPPath}/get
	// - set log level: POST {HTTPPath}/set?level={level} where level is one of DEBUG, INFO, WARN, ERROR or a number
	HTTPPath string
}

func (x *Options) OnLoaded() {
    op.SetOr(&x.Output, "stderr")
    op.SetOr(&x.TimeFormat, "H")
    op.SetOr(&x.SourceFormat, "S")
    op.SetOr(&x.LevelFormat, "L")
}

// Component represents the logger component API.
type Component interface {
	GetLogLevel() slog.Level
	SetLogLevel(level slog.Level)
}
