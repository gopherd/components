@next(
	go_imports=`
		*github.com/gopherd/core/typing.Duration,
		*redis:github.com/go-redis/redis/v8.Client,
	`,
)
package redis;

@next(go_alias="typing.Duration") 
interface Duration {}

struct Options {
	// The network type, either tcp or unix.
	// Default is tcp.
	string network;
	// host:port address.
	string addr;

	// Use the specified Username to authenticate the current connection
	// with one of the connections defined in the ACL list when connecting
	// to a Redis 6.0 instance, or greater, that is using the Redis ACL system.
	string username;
	// Optional password. Must match the password specified in the
	// requirepass server configuration option (if connecting to a Redis 5.0 instance, or lower),
	// or the User Password when connecting to a Redis 6.0 instance, or greater,
	// that is using the Redis ACL system.
	string password;

	// Database to be selected after connecting to the server.
	@next(tokens="DB")
	int db;

	// Maximum number of retries before giving up.
	// Default is 3 retries; -1 (not 0) disables retries.
	int maxRetries;
	// Minimum backoff between each retry.
	// Default is 8 milliseconds; -1 disables backoff.
	Duration minRetryBackoff;
	// Maximum backoff between each retry.
	// Default is 512 milliseconds; -1 disables backoff.
	Duration maxRetryBackoff;

	// Dial timeout for establishing new connections.
	// Default is 5 seconds.
	Duration dialTimeout;
	// Timeout for socket reads. If reached, commands will fail
	// with a timeout instead of blocking. Use value -1 for no timeout and 0 for default.
	// Default is 3 seconds.
	Duration readTimeout;
	// Timeout for socket writes. If reached, commands will fail
	// with a timeout instead of blocking.
	// Default is ReadTimeout.
	Duration writeTimeout;

	// Type of connection pool.
	// true for FIFO pool, false for LIFO pool.
	// Note that fifo has higher overhead compared to lifo.
	bool poolFIFO;
	// Maximum number of socket connections.
	// Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
	int poolSize;
	// Minimum number of idle connections which is useful when establishing
	// new connection is slow.
	int minIdleConns;
	// Connection age at which client retires (closes) the connection.
	// Default is to not close aged connections.
	Duration maxConnAge;
	// Amount of time client waits for connection if all connections
	// are busy before returning an error.
	// Default is ReadTimeout + 1 second.
	Duration poolTimeout;
	// Amount of time after which client closes idle connections.
	// Should be less than server's timeout.
	// Default is 5 minutes. -1 disables idle timeout check.
	Duration idleTimeout;
	// Frequency of idle checks made by idle connections reaper.
	// Default is 1 minute. -1 disables idle connections reaper,
	// but idle connections are still discarded by the client
	// if IdleTimeout is set.
	Duration idleCheckFrequency;
}

// Component represents a Redis client component API.
interface Component {
	// Client returns the Redis client.
	@next(go_alias="*redis.Client") 
	Client() any;
}